// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      Int     @id @default(autoincrement())
  name    String
  key     String  @unique @default(uuid())
  matches PlayersOnMatches[]
  msgs    Message[]
  results Result[]
  points  Point[]
}


enum MatchStatus {
  START
  FINISHED
  GRADED
}

model Match {
  id      Int    @id @default(autoincrement())
  name    String

  firstPlayerId Int 
  players PlayersOnMatches[]

  topicId Int 
  topic   Topic @relation(fields: [topicId], references: [id])

  matchStatus  MatchStatus @default(START)
  historyMsgs Message[] 

  result Result?
}

model PlayersOnMatches {
  playerId Int
  player   User  @relation(fields: [playerId], references: [id])
  matchId  Int
  match    Match @relation(fields: [matchId], references: [id], onDelete: Cascade)

  createAt DateTime @default(now())

  @@id([playerId, matchId])
}

model Message {
  id Int @id @default(autoincrement())
  matchId Int
  match Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
  text String
  userId Int
  user User @relation(fields: [userId], references: [id])

  createAt DateTime @default(now())
}

model Topic {
  id Int @id @default(autoincrement())
  description String
  instructions Instruction[]
  matches Match[]
}

model Instruction {
  id Int @id @default(autoincrement()) 
  order Int
  input String
  
  topicId Int
  topic Topic @relation(fields: [topicId], references: [id])

  @@unique([topicId, order])
}

model Result {
  id Int @id @default(autoincrement()) 

  winnerId Int
  winner User @relation(fields: [winnerId], references: [id])

  comment String

  matchId Int @unique
  match Match @relation(fields: [matchId], references: [id], onDelete: Cascade)

  points Point[]

  createAt DateTime @default(now())
}

model Point {
  id Int @id @default(autoincrement())

  userId Int
  user User @relation(fields: [userId], references: [id])

  resultId Int
  result Result @relation(fields: [resultId], references: [id], onDelete: Cascade)

  point Int
}